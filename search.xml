<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[添加博客页面多效果切换的崩溃搞怪提示]]></title>
    <url>%2FMaxHuang26.github.io%2F2019%2F07%2F18%2F%E6%B7%BB%E5%8A%A0%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%A4%9A%E6%95%88%E6%9E%9C%E5%88%87%E6%8D%A2%E7%9A%84%E5%B4%A9%E6%BA%83%E6%90%9E%E6%80%AA%E6%8F%90%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[太长不看版(1)在主题目录下的\themes\hexo-theme-next\source\js\src新建js文件crash_cheat_w.js，也可以放在自己习惯的目录下，代码如下： 1234567891011121314151617181920212223242526272829303132333435 var OriginTitile = document.title; var titleTime = null; var titleIndex = 0; title = [&#123;//把在网页标题显示的几组搞笑表情添加在一个集合中。 blur: &quot;(●—●) 哎呦，崩溃啦！&quot;, focus: &quot;o(≧∇≦o) 啊咧，又好了……&quot; &#125;, &#123; blur: &quot;(つェ⊂) 看不到我～&quot;, focus: &quot;(*´∇｀*) 被发现啦～&quot; &#125;, &#123; blur: &quot;(&gt;_&lt;) 我藏好了哦&quot;, focus: &quot;(*´∇｀*) 被发现啦～&quot; &#125;, &#123; blur: &quot;(งᵒ̌皿ᵒ̌)ง⁼³₌₃ 别跑呀！！ ~&quot;, focus: &quot;((٩(´͈ᗨ`͈)۶)) 回来啦~抱一个&quot; &#125; ]; //直接调用onvisibilitychange监听页面是否被隐藏。document.onvisibilitychange= function() &#123; if (document.hidden) &#123; titleIndex = Math.floor(Math.random() * 4); document.title = title[titleIndex].blur; if (titleTime) &#123; clearTimeout(titleTime); titleTime = null; &#125; &#125; else &#123; document.title = title[titleIndex].focus; titleTime = setTimeout(function() &#123; document.title = OriginTitile; &#125;, 3000); &#125; &#125; (2)在themes\hexo-theme-next\layout目录下，修改_layout.swig文件，在body中添加语句调用第一步中创建的js文件： 12&lt;!--崩溃欺骗--&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/crash_cheat_w.js&quot;&gt;&lt;/script&gt; &emsp;&emsp;完事儿。 代码整理过程&emsp;&emsp;之前在看很多人自建的博客的时候已经看到这种crash cheat的效果，实际也有相关教程：Hexo NexT主题中添加网页标题崩溃欺骗搞怪特效&emsp;&emsp;后来在查其他资料的时候偶然看到有位同好的博客：YRC的博客的页面标题搞怪提示有不同的切换效果，所以也想自己尝试编写JS程序实现功能。参考上面的教程之后，我编写的程序如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!--崩溃欺骗--&gt; var OriginTitle = document.title; var titleTime; //添加全局变量x，用于存储第一次页面被隐藏的时候使用的表情组别。 var x=null; //用函数返回随机数1,2,3。 function myRandom() &#123; var rand = Math.random(); if (rand &lt; .33) return 1; if (.33&lt;rand &lt; .66) return 2; if (rand &gt; .67) return 3;&#125; document.addEventListener(&apos;visibilitychange&apos;, function () &#123; //第一次页面被隐藏的时候，addEventListener监听到页面可见性改变，调用函数 //页面被隐藏的时候使用的表情组别赋给局部变量b。 var b = myRandom(); //b负责页面被隐藏的时候显示的表情。 if(b==1)&#123; if (document.hidden) &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/MaxHuang26.github.io/images/favicon.ico&quot;); document.title = &apos;╭(°A°`)╮ 页面崩溃啦 ~&apos;; clearTimeout(titleTime); &#125; &#125; else if (b==2)&#123; if (document.hidden) &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/MaxHuang26.github.io/images/favicon.ico&quot;); document.title = &apos;(งᵒ̌皿ᵒ̌)ง⁼³₌₃ 别跑呀！！ ~&apos;; clearTimeout(titleTime); &#125; &#125; else if (b==3)&#123; if (document.hidden) &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/MaxHuang26.github.io/images/favicon.ico&quot;); document.title = &apos;(/∇＼*) 我藏好啦 ~&apos;; clearTimeout(titleTime); &#125; &#125; //如果x的值为null，就把b的值给x， //x负责的是用户返回页面的时候调用之前使用的组别表情，完成后半部分的动作。 if(x==null)&#123; x=b;&#125; if(x==1)&#123; if (!document.hidden) &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/MaxHuang26.github.io/images/favicon.ico&quot;); document.title = &apos;(ฅ&gt;ω&lt;*ฅ) 噫又好了~&apos;; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); //完成后半部分动作后，x再次置null，等待接受下一次b给的值。 x=null; &#125; &#125; else if (x==2)&#123; if (!document.hidden) &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/MaxHuang26.github.io/images/favicon.ico&quot;); document.title = &apos;((٩(´͈ᗨ`͈)۶)) 回来啦~抱一个&apos;; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); x=null; &#125; &#125; else if (x==3)&#123; if (!document.hidden) &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/MaxHuang26.github.io/images/favicon.ico&quot;); document.title = &apos;(*๓´╰╯`๓) 嗨呀~被找到啦&apos;; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); x=null; &#125; &#125; &#125;); &emsp;&emsp;同样在layout里面调用之后是可以实现效果的，但是可能由于判断条件较多，页面快速切换的时候存在显示延迟，个人不是很满意。&emsp;&emsp;后来联系YRC的博客的博主，得到了相关代码，发现JS代码是其网页中的网页助手这个插件的一小部分，实现逻辑其实和我的代码很像，优点是把所有表情组合都通过blur、focus这两个页面聚焦失焦的判断一一对应，并且放在一个集合中，最后使用在调用的时候直接使用title[titleIndex].blur和title[titleIndex].focus直接调用即可。代码很简洁，效果也很棒，就自己再加了一些修改优化放在本文开头了。感谢这位朋友，多帮他的博客宣传一下YRC的博客。 踩坑总结&emsp;&emsp;1）一开始尝试编写自己的JS文件的时候，发现在切换页面之后，网页标签的icon会丢失。 &emsp;&emsp;试了很多方法，发现是icon的应用路径和原来静态网页index不一致导致的。在浏览器调试的时候使用F12，在source的/MaxHuang26.github.io/images中没有找到favicon，但是在地址栏加上这段地址后缀是可以看到favicon的，所以确定是JS代码的引用路径出了问题，补全路径之后问题解决。&emsp;&emsp;2）在尝试修改复现出拿到的JS代码时，F12出现报错： &emsp;&emsp;查了一下，可能是因为没有载入jquery的锅，但是添加引用之后还是有报错，这个暂时先放一放。因为我恰好查到document.onvisibilitychange这个函数，就直接拿来用了。&emsp;&emsp;最近有点太沉迷这个博客了，相比我的课题，倒腾这些真的还算是边学边玩很有意思吧。不过也得先缓缓了，毕业要紧。还是那句话：先把必做之事做完，再做想做之事。 2019.7.18&emsp;11:16]]></content>
      <tags>
        <tag>Javascript</tag>
        <tag>crash_cheat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客主题修改汇总]]></title>
    <url>%2FMaxHuang26.github.io%2F2019%2F07%2F15%2F%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;本文汇总在尝试使用next主题并且自定义插件中遇到的问题。主要分为以下几项：1、静态资源压缩；2、显示当前浏览进度；3、添加live2d动态形象；4、数据统计与分析；5、自定义网页icon；6、自定义头像；7、添加评论功能；8、修改页面。 静态资源压缩&emsp;&emsp;由于博客是由hexo部署在GitHub上的，在国内网络的载入比较慢。因此考虑对页面的静态资源进行压缩，包括css,js,html等文件。本文查阅相关资料后，确定使用较为常规的gulp插件进行压缩。&emsp;&emsp;gulp是Node.js的一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。以下是其中文官方网址：https://www.gulpjs.com.cn/docs/&emsp;&emsp;后期将整理gulp的详细使用方法。本文只列出使用到的功能。&emsp;&emsp;在博客站点目录下（之前备份的分支github.io）安装gulp： 1npm install gulp -g &emsp;&emsp;安装成功后依次安装一下gulp插件，用来自动执行相关资源如css,js,html,image等的压缩操作： 12345npm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save &emsp;&emsp;安装完成之后，在站点目录下新建gulpfile.js文件，用于编辑gulp压缩操作的默认执行语句： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);var imagemin = require(&apos;gulp-imagemin&apos;);// 压缩css文件gulp.task(&apos;minify-css&apos;, function() &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩html文件gulp.task(&apos;minify-html&apos;, function() &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩js文件gulp.task(&apos;minify-js&apos;, function() &#123; return gulp.src([&apos;./public/**/.js&apos;,&apos;!./public/js/**/*min.js&apos;]) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩 public/demo 目录内图片gulp.task(&apos;minify-images&apos;, done=&gt;&#123; gulp.src(&apos;./public/demo/**/*.*&apos;) .pipe(imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest(&apos;./public/uploads&apos;)); done();&#125;);// 默认任务 gulp 4.0 适用的方式gulp.task(&apos;default&apos;, gulp.parallel(&apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, &apos;minify-images&apos; //build the website)); gulpfile.js编辑相关问题1、本次安装的gulp版本&gt;4.0，一开始写的默认程序如下： 123gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-images&apos;]); &emsp;&emsp;git bash中运行gulp出现： 123456789101112131415assert.js:339 throw err; ^AssertionError [ERR_ASSERTION]: Task function must be specified at Gulp.set [as _setTask] (E:\GitHub\MaxHuang26.github.io\node_modules\undertaker\lib\set-task.js:10:3) at Gulp.task (E:\GitHub\MaxHuang26.github.io\node_modules\undertaker\lib\task.js:13:8) at Object.&lt;anonymous&gt; (E:\GitHub\MaxHuang26.github.io\gulpfile.js:49:6) at Module._compile (internal/modules/cjs/loader.js:776:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10) at Module.load (internal/modules/cjs/loader.js:653:32) at tryModuleLoad (internal/modules/cjs/loader.js:593:12) at Function.Module._load (internal/modules/cjs/loader.js:585:3) at Module.require (internal/modules/cjs/loader.js:690:17) at require (internal/modules/cjs/helpers.js:25:18) &emsp;&emsp;查询资料后发现在4.0版本以后，并行任务的写法改变，默认任务格式应该改为： 1234// 默认任务 gulp 4.0 适用的方式gulp.task(&apos;default&apos;, gulp.parallel(&apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, &apos;minify-images&apos; //build the website)); &emsp;&emsp;修改之后运行，但是执行gulp语句时出现某一程序无法finished的情况： 123[23:05:55] &apos;default&apos; errored after 26 ms[23:05:55] The following tasks did not complete: minify-html, minify-css, minify-js[23:05:55] Did you forget to signal async completion? &emsp;&emsp;分析问题后发现，在不使用文件流的情况下，向task的函数里传入一个的回调函数，以结束task。因此根据格式，修改出错的插件调用函数minify-images为： 123456789101112// 压缩 public/demo 目录内图片gulp.task(&apos;minify-images&apos;, done=&gt;&#123; gulp.src(&apos;./public/demo/**/*.*&apos;) .pipe(imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest(&apos;./public/uploads&apos;)); done();&#125;); &emsp;&emsp;其中，done()即为回调函数。再次执行gulp语句,gut bash输出正常： 12345678910111213$ gulp[23:07:06] Using gulpfile E:\GitHub\MaxHuang26.github.io\gulpfile.js[23:07:06] Starting &apos;default&apos;...[23:07:06] Starting &apos;minify-html&apos;...[23:07:06] Starting &apos;minify-css&apos;...[23:07:06] Starting &apos;minify-js&apos;...[23:07:06] Starting &apos;minify-images&apos;...[23:07:06] Finished &apos;minify-images&apos; after 18 ms[23:07:06] gulp-imagemin: Minified 0 images[23:07:07] Finished &apos;minify-js&apos; after 550 ms[23:07:07] Finished &apos;minify-css&apos; after 917 ms[23:07:07] Finished &apos;minify-html&apos; after 1.25 s[23:07:07] Finished &apos;default&apos; after 1.26 s &emsp;&emsp;以上完成了基于gulp的静态资源压缩配置，之后每次执行hexo g语句之后执行一次gulp语句即可实现对页面静态资源的压缩处理，即： 1hexo g &amp;&amp; gulp &amp;&amp; hexo d 显示当前浏览进度&emsp;&emsp;修改主题文件夹的配置文件themes/*/_config.yml，把 scrollpercent的false 改为 true： 1scrollpercent: true 添加live2d动态形象&emsp;&emsp;在站点文件夹中git bash，执行语句安装插件： 1npm install --save hexo-helper-live2d &emsp;&emsp;安装完成后在站点文件夹的配置文件_config.yml中，自行添加live2d的配置语句如下： 123456789101112131415161718Live_2dlive2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false log: false model: use: live2d-widget-model-wanko display: position: right width: 150 height: 300 mobile: show: true &emsp;&emsp;其中的 12model: use: live2d-widget-model-wanko 即为自行选择安装的live2d形象，下载方式未执行语句： 1npm install --save live2d-widget-model-&lt;喜欢的模型名字&gt; &emsp;&emsp;执行成功后，在站点文件夹中新建一个目录，命名为live2d_models，将下载在node_modules目录下的live2d形象文件夹复制到里面统一管理。挑选自己喜欢的形象的文件夹名称填在model: use语句后面,最后执行： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 在本地服务器确认无误后即可部署到远端。 数据统计与分析&emsp;&emsp;使用第三方统计插件“不蒜子”。编辑 主题配置文件 themes/*/_config.yml中的busuanzi_count的配置项即可。 121)当enable: true时，代表开启全局开关。2)若site_uv（本站访客数）、site_pv（本站访客数）、page_pv（本文总阅读量）的值均为false时，不蒜子仅作记录而不会在页面上显示。 注意：不蒜子域名有改变，可能需要自行修改”\themes*\layout_third-party\analytics\busuanzi-counter.swig”： 12&lt;div class=&quot;busuanzi-count&quot;&gt; &lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 自定义网页icon&emsp;&emsp;最后一项，希望自己的网站icon能自定义为SOS团的团徽，自己网上找了logo，在首页静态HTML代码index.html中找到icon的目标地址： 12345&lt;link rel=&quot;shortcut icon&quot; href=&quot;/MaxHuang26.github.io/images/favicon.ico&quot;&gt; &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/MaxHuang26.github.io/images/favicon-192x192.png&quot; sizes=&quot;192x192&quot;&gt; &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/MaxHuang26.github.io/images/apple-touch-icon.png&quot;&gt; &emsp;&emsp;找到相关文件，使用PS改出对应像素的图像文件，命名，替换，即可达到目的。 2019.07.15 23:39 自定义头像&emsp;&emsp;在主题配置文件中找到Sidebar Avatar设置选项，从url中找到需要在images目录中设置一个200*200的avatar.gif文件，使用PS编辑完成。将配置文件中的注释#去掉，如下： 123456789avatar: # In theme directory (source/images): /images/avatar.gif# In site directory (source/uploads): /uploads/avatar.gif# You can also use other linking images. url: /images/avatar.gif 有注释可见改变url可以使用别的命名的文件。 添加评论功能&emsp;&emsp;选择来必力作为博客的评论平台，官网如下：https://www.livere.com/ &emsp;&emsp;按照要求注册个人账号后在管理页面-&gt;代码管理中找到data-uid=，所带代码就是自己的账号ID。回到主题配置文件中在: 12345# LiveRe comments system# You can get your uid from https://livere.com/insight/myCode (General web site)livere_uid: 中填上UID。部署即可。 修改页面&emsp;&emsp;为了首页不会因为平铺博文内容显得冗长，设置“阅读全文”的选项：&emsp;&emsp;修改主题配置文件中的代码如下即可： 123auto_excerpt: enable: false--改为--&gt;true length: 150 #设置显示文段长度 2019.7.16 &emsp;&emsp;14.30更新后续]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Next主题</tag>
        <tag>自定义主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于markdown的换行与首行缩进]]></title>
    <url>%2FMaxHuang26.github.io%2F2019%2F07%2F09%2F%E5%85%B3%E4%BA%8Emarkdown%E7%9A%84%E6%8D%A2%E8%A1%8C%E4%B8%8E%E9%A6%96%E8%A1%8C%E7%BC%A9%E8%BF%9B%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;网上找到了以下代码，先备份吧： 1234半方大的空白&amp;ensp;或&amp;#8194;全方大的空白&amp;emsp;或&amp;#8195;**目前用的&amp;emsp不断行的空白格&amp;nbsp;或&amp;#160;换行&lt;br&gt;**可行]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现多个电脑编辑博客]]></title>
    <url>%2FMaxHuang26.github.io%2F2019%2F07%2F09%2F%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E7%94%B5%E8%84%91%E7%BC%96%E8%BE%91%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;为了在寝室能用自己的电脑编辑博客。上网查了相关设置方法，网址贴在最后备份。这篇是自己一边尝试一边写的。 &emsp;&emsp;使用Hexo部署在Github仓库里的博客属于静态的博客文件，Hexo本身的配置文件并没有被部署到仓库中。因此在github默认的master仓库中的文件和本地文件并不一致。如下： &emsp;&emsp;master中被部署的文件列表存在于hexo本地目录中的.deploy_git文件夹中，可见与github的master库中的文件列表一致： &emsp;&emsp;同时附上hexo本地目录中的结构解析，： 由上可见： 1、hexo通过把md文件转换成网页文件并部署到github的静态网页，从而成为博客； 2、hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。 &emsp;&emsp;为了实现多个电脑编辑博客的效果，我们要把hexo的相关部署配置一起备份在github上，再换新电脑之后能直接克隆下来进行简单的配置就可以使用。 在原PC上的操作1）对username.github.io仓库新建hexo分支，并克隆&emsp;&emsp;在github的博客仓库中新建一个分支，命名为hexo，并将hexo分支设置为默认分支。然后在硬盘另找一个目录，把该仓库克隆到本地。 &emsp;&emsp;进入克隆下来的仓库MaxHuang26.github.io，用git branch语句确认是否处于hexo分支上： 2）将本地博客的部署文件拷贝进username.github.io文件目录&emsp;&emsp;如题，将Hexo目录中的所有文件，即本地博客的部署文件全部拷贝到这个克隆下来的hexo仓库文件夹MaxHuang26.github.io中。 &emsp;&emsp;在MaxHuang26.github.io中做一下判断，判断合适后再执行以下代码： 1）将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败；2）由于删除了themes目录中的.git，因此不能通过git pull更新主题，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目录即可。 123git add .git commit -m &apos;back up hexo files&apos; *引号中的文字属于操作备注，方便查询，可改动git push &emsp;&emsp;将博客的hexo部署文件提交到github中的hexo分支中，此时刷新github页面可以看出hexo和master两个分支的区别。 &emsp;&emsp;其中，master分支和hexo版本各自保留一个版本，master分支用于保存博客静态资源，提供博客页面供人访问。hexo分支用于备份博客部署文件，供自己维护更新。所以以后在不同电脑的更新都在hexo分支中执行。 3)测试页发布&emsp;&emsp;在公司电脑的hexo本地分支部署好之后，尝试发布一份测试博客。hexo new 新建了一个测试页md文件： &emsp;&emsp;在本地4000服务器测试可行，使用git d指令将分支变化推到github上，打开博客网页如下，测试成功： 以上部分是在公司电脑进行编辑发送的，晚上回寝室再尝试部署并整理总结（7.09）&emsp;&emsp;昨晚回寝室之后把hexo分支克隆到本地，发现里面的博客文章没有更新，才想起来下班之前没有在公司电脑执行以下语句： 123git add .git commit -m &apos;back up hexo files&apos; *引号中的文字属于操作备注，方便查询，可改动git push &emsp;&emsp;现在回到公司重新编辑过后，到库里已经可以看到文章，等回寝室在做后续修改。 以上为7.10在公司PC编辑内容 &emsp;&emsp;回寝室后在已经克隆下来并部署好node.js模组的hexo本地分支中执行了git pull语句同步了在公司推到库里的md文件。进行下一步编辑： 在寝室PC的操作&emsp;&emsp;回到寝室的新PC上后，选定一个硬盘位置新建一个目录如：Max’blog。在目录中将hexo分支MaxHuang26.github.io克隆到本地。直接进入MaxHuang26.github.io目录内，执行： 1npm install &emsp;&emsp;将hexo分支中没有备份的node_modoles这一组件重新安装完成。&emsp;&emsp;注意：&emsp;&emsp;如果之前的博客主题有更新，则需要进入themes目录中重新克隆一次该主题的最新版本，因为之前备份的时候可能删除了该主题的.git目录。 &emsp;&emsp;现在已经可以在新的PC上编辑修改新的或者之前的md文件，发布只要执行hexo d即可（如果不成功则需要hexo clean后再次hexo g -d） 每次编辑之后必须做的事项&emsp;&emsp;在本地的执行编辑之后，都必须执行： 123git add .git commit -m &apos;back up hexo files&apos; *引号中的文字属于操作备注，方便查询，可改动git push &emsp;&emsp;这三个语句，以保证该分支所处的远程数据库保持最新的更改。在每次更换新的PC后，第一步执行的操作必须是： 1git pull 使本地库的数据刷新，和远程库的数据保持一致。 以上就是实现多个PC编辑博客的方法总结以上内容为寝室PC编辑发布参考资料网址： (1) https://www.jianshu.com/p/0b1fccce74e0 (2) https://theqwang.github.io/2017/03/17/%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E9%97%B4%E4%BD%BF%E7%94%A8hexo/]]></content>
      <tags>
        <tag>日常折腾</tag>
        <tag>Github Pages</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2FMaxHuang26.github.io%2F2019%2F07%2F09%2F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[测试分支]]></content>
  </entry>
  <entry>
    <title><![CDATA[建立个人博客的经验汇总1.0]]></title>
    <url>%2FMaxHuang26.github.io%2F2019%2F07%2F09%2F%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BB%8F%E9%AA%8C%E6%B1%87%E6%80%BB%E5%8E%9F%E7%89%88%2F</url>
    <content type="text"><![CDATA[​ 今天完全是一时兴起，想变着法子刺激自己把Java和安卓学得更扎实，就想到研究一下自己建立一个个人博客，定期把自己复习之前的笔记总结发上来。倒腾了一天先把自己碰到的问题尽可能的写下来吧。 准备工作​ 尝试了自己套用网上的模板之后发现效果不理想，因此转而使用node.js和hexo两个工具创建博客。参考CSDN博客： https://blog.csdn.net/qq_36759224/article/details/82121420 安装node.jshttps://nodejs.org/en/download/ 访问以上node官网下载，按照提示安装。 git bash 已经安装过了，因此直接用来安装hexo 安装Hexo​ 选择磁盘中一个位置，新建文件夹命名为Max’s Blog作为后续博客固定更新文件夹。在该文件夹目录下鼠标右键点击点击 Git Bash Here，输入以下 npm 命令即可安装，第一个命令表示安装 hexo，第二个命令表示安装 hexo 部署到 git page 的 deployer，如图所示即为安装成功 12$ npm install hexo-cli -g $ npm install hexo-deployer-git --save Hexo初始化在刚才新建的文件夹里面再次新建一个 Hexo 文件夹（如：我的文件夹为：E\Max’sBlog\Hexo）,进入该 Hexo 文件夹右键鼠标，点击 Git Bash Here，输入以下命令 1$ hexo init Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下 在本地查看网页效果执行以下命令，执行完即可登录 http://localhost:4000/ 查看效果 12$ hexo generate $ hexo server 显示以下信息说明操作成功 1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 将博客部署到 Github Pages 上github已经注册并配置SSH，后期再补充详细操作 ​ 创建本博客的相关仓库后，复制用于clone的SSH语句，在Hexo文件夹中找到_config.yml文件，打开设置相关参数。 DeploymentDocs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:MaxHuang26/Max.githublog.io.git branch: master 在 Hexo 文件夹下分别执行以下命令 12$ hexo g $ hexo d 或者直接执行 1$ hexo g -d 执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功 1ERROR Deployer not found: git 需要执行以下命令再安装一次： 1npm install hexo-deployer-git --save 在博客上发表文章新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题根据需要命名 1$ hexo n &quot;文章标题&quot; 给博客更换主题https://hexo.io/themes/ ​ 进入Hexo主题官网，找到自己喜欢的主题，点击进入该主题网页，找到该主题的作者github网址并进入，找到该主题项目。 ​ 再打开 Hexo 文件夹下的 themes 目录（如：E:\Max’sBlog\Hexo\themes），右键 Git Bash Here，输入以下命令： 1$ git clone 此处填写你刚才复制的主题地址 然后打开 Hexo 文件夹下的配置文件 _config.yml ，找到关键字 theme，修改参数为：theme：hexo-theme-aero-dual （其他主题修改成相应名称即可），再次注意冒号后面有一个空格！ Themes: https://hexo.io/themes/theme: cactus-light 返回 Hexo 目录，右键 Git Bash Here ，输入以下命令开始部署主题： 12$ hexo g $ hexo s 打开 Hexo 文件夹，右键 Git Bash Here ，输入以下命令： 123$ hexo clean //该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题$ hexo g -d 遇到的问题及其解决方法按照以上方法将网页部署到github之后发现主题样式不能正确显示，查询解决方法是修改_config.yml文件如下 URLIf your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘url: https://maxhuang26.github.io/Max.githublog.ioroot: /Max.githublog.io/permalink: :year/:month/:day/:title/permalink_defaults: 再次部署，问题解决，网页显示正常！ 原文写于2019年7月7日]]></content>
  </entry>
  <entry>
    <title><![CDATA[先把必做之事做完，再做想做之事。]]></title>
    <url>%2FMaxHuang26.github.io%2F2019%2F07%2F08%2F%E5%85%88%E6%8A%8A%E5%BF%85%E5%81%9A%E4%B9%8B%E4%BA%8B%E5%81%9A%E5%AE%8C%EF%BC%8C%E5%86%8D%E5%81%9A%E6%83%B3%E5%81%9A%E4%B9%8B%E4%BA%8B%E3%80%82%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建个人博客经验汇总1.5]]></title>
    <url>%2FMaxHuang26.github.io%2F2019%2F07%2F08%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BB%8F%E9%AA%8C%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[本文尚未解决问题： 1、创建分支在不同电脑编辑文档； 2、插入图片时，加入图标题会出现图片裂纹的错误符号。 &emsp;&emsp;今天完全是一时兴起，想变着法子刺激自己把Java和安卓学得更扎实，就想到研究一下自己建立一个个人博客，定期把自己复习之前的笔记总结发上来。倒腾了一天先把自己碰到的问题尽可能的写下来吧。 准备工作&emsp;&emsp;尝试了自己套用网上的模板之后发现效果不理想，因此转而使用node.js和hexo两个工具创建博客。参考CSDN博客： https://blog.csdn.net/qq_36759224/article/details/82121420 安装node.jshttps://nodejs.org/en/download/ &emsp;&emsp;访问以上node官网下载，按照提示安装。 &emsp;&emsp;git bash 已经安装过了，因此直接用来安装hexo 安装Hexo&emsp;&emsp;选择磁盘中一个位置，新建文件夹命名为Max’s Blog作为后续博客固定更新文件夹。在该文件夹目录下鼠标右键点击点击 Git Bash Here，输入以下 npm 命令即可安装，第一个命令表示安装 hexo，第二个命令表示安装 hexo 部署到 git page 的 deployer，如图所示即为安装成功 12$ npm install hexo-cli -g $ npm install hexo-deployer-git --save Hexo初始化&emsp;&emsp;在刚才新建的文件夹里面再次新建一个 Hexo 文件夹（如：我的文件夹为：E\Max’sBlog\Hexo）,进入该 Hexo 文件夹右键鼠标，点击 Git Bash Here，输入以下命令 1$ hexo init &emsp;&emsp;Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下 在本地查看网页效果&emsp;&emsp;执行以下命令，执行完即可登录 http://localhost:4000/ 查看效果 12$ hexo generate $ hexo server &emsp;&emsp;显示以下信息说明操作成功 1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 将博客部署到 Github Pages 上github已经注册并配置SSH，后期再补充详细操作 ​&emsp;&emsp;创建本博客的相关仓库后，复制用于clone的SSH语句，在Hexo文件夹中找到_config.yml文件，打开设置相关参数。 &emsp;&emsp;在 Hexo 文件夹下分别执行以下命令 12$ hexo g $ hexo d &emsp;&emsp;或者直接执行 1$ hexo g -d &emsp;&emsp;执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功 1ERROR Deployer not found: git &emsp;&emsp;需要执行以下命令再安装一次： 1npm install hexo-deployer-git --save 在博客上发表文章&emsp;&emsp;新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题根据需要命名 1$ hexo n &quot;文章标题&quot; 给博客更换主题https://hexo.io/themes/ &emsp;&emsp;进入Hexo主题官网，找到自己喜欢的主题，点击进入该主题网页，找到该主题的作者github网址并进入，找到该主题项目。 &emsp;&emsp; 再打开 Hexo 文件夹下的 themes 目录（如：E:\Max’sBlog\Hexo\themes），右键 Git Bash Here，输入以下命令： 1$ git clone 此处填写你刚才复制的主题地址 &emsp;&emsp;然后打开 Hexo 文件夹下的配置文件 _config.yml ，找到关键字 theme，修改参数为：theme：hexo-theme-aero-dual （其他主题修改成相应名称即可），再次注意冒号后面有一个空格！ &emsp;&emsp;返回 Hexo 目录，右键 Git Bash Here ，输入以下命令开始部署主题： 12$ hexo g $ hexo s &emsp;&emsp;打开 Hexo 文件夹，右键 Git Bash Here ，输入以下命令： 123$ hexo clean //该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题$ hexo g -d 遇到的问题及其解决方法&emsp;&emsp;按照以上方法将网页部署到github之后发现主题样式不能正确显示，查询解决方法是修改_config.yml文件如下 ​&emsp;&emsp; 一定要注意！URL不能是“https”,必须改成“http”,因为一般用户访问博客不可能通过SSL（安全套接层）访问，我的粗浅理解是https用于已注册用户，未注册用户直接http访问即可。 &emsp;&emsp;再次部署，问题解决，网页样式显示正常！ 网页图片显示出现问题&emsp;&emsp;点进本文发现，文章所使用的图片信息全部显示出错： ​ ​&emsp;&emsp;查询相关资料发现是由于Hexo没有进行相关设置，现补充设置方法如下： Hexo3.0以下版本（本方法尝试不可行，可能和版本有关，备份）​&emsp;&emsp;回到_config.yml文件，修改代码如下： &emsp;&emsp;图中，将post_asset_folder: 设置为true，可以再发布文章的目录中，在创建md文件的同时在\Hexo\source_posts目录下新建一个同名文件夹作为该文章的相关资源文件夹。将该文章相关的图片放在该同名文件夹并在文章中通过markdown语句调用该目录下的图片文件即可。 &emsp;&emsp;最后，执行语句，清除Hexo缓存，再次更新服务器。发现没有变化，再次查询资料了解到Hexo版本到3.0之后支持的markdown语法有改变。检查自己用的版本好如下： Hexo3.0以后版本改善网页显示图片（本方法测试可行）&emsp;&emsp;3.0以前版本使用的插入图片语句是 1![图片描述](资源路径\搭建个人博客经验汇总\init.png) &emsp;&emsp;3.0以后版本使用的图片语句 1&#123;% asset_img 1.jpg 这是一个新的博客的图片的说明 %&#125; &emsp;&emsp;asset_img是插入的固定语句，由于图片已经存在资源目录中，所以直接写文件名.文件格式即可，空格后的“这是一个新的博客的图片的说明”是图标题。但是在实际使用中发现，加了图表题后还是会产生一个图片的裂纹图像，因此本文暂时不添加图标题，后期再尝试改善这个问题。 本文于2019.7.8 下午 重新修改编辑]]></content>
      <tags>
        <tag>Github Pages</tag>
        <tag>Hexo; Node.js</tag>
        <tag>Personal blog</tag>
      </tags>
  </entry>
</search>
